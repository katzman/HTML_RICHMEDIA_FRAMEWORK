function TrackingManager() {}TrackingManager.setTrackingVendor = function( _vendor ){    this.trackingVendor = _vendor;    this.btnList = {};    this.timerList = [];    this.addNotificationInterests();};TrackingManager.addBtnTracking = function( _btnID, _trackingID, _close ){    if( !this.btnList ) this.btnList = {};    if( this.btnList[_btnID] ) return;    this.btnList[_btnID] = { id:_trackingID, close:_close };};TrackingManager.addBtnsTracking = function( _btns, _trackingID, _close ){    if( !_btns ) return;    var length = _btns.length;    var btn;    for( var i = 0; i < length; i++ )    {        btn = _btns[i];        if( !btn ) continue;        this.addBtnTracking( btn, _trackingID, _close );    }};TrackingManager.addBtnsTrackingByClass = function( _class, _trackingID, _close ){    var element;    var elements = document.getElementsByClassName( _class );    for( var index in elements )    {        element = elements[index];        if( !element ) continue;        this.addBtnTracking( element.id, _trackingID, _close );    }};TrackingManager.collapseUnit = function( _btn, _tmr, _ctr ){    if( !this.trackingVendor ) return;    this.stopAllTimers();    var counter;    var btnId;    if( _ctr )    {        counter = _ctr;    }    else if( _btn )    {        btnId = _btn.id;        if( this.btnList[btnId] ) counter = this.btnList[btnId].id;    }    if( counter ) this.trackCounter( counter );    this.trackingVendor.collapseUnit();};TrackingManager.closeUnit = function( _btn, _isUser, _ctr ){    if( !this.trackingVendor ) return;    this.stopAllTimers();    var counter;    var btnId;    if( _ctr )    {        counter = _ctr;    }    else if( _btn )    {        btnId = _btn.id;        if( this.btnList[btnId] ) counter = this.btnList[btnId].id;    }    if( counter ) this.trackCounter( counter );    this.trackingVendor.closeUnit();};TrackingManager.expandUnit = function( _btn, _tmr, _ctr ){    if( !this.trackingVendor ) return;    this.trackingVendor.expandUnit();    var counter;    var btnId;    var timer;    // set timer    if( _tmr != "" ) timer = _tmr;    if( timer ) this.timerStart( timer );    // set counter    if( _ctr != "" ) counter = _ctr;    else if( _btn )    {        btnId = _btn.id;        if( this.btnList[btnId] ) counter = this.btnList[btnId].id;    }    if( counter ) this.trackCounter( counter );};TrackingManager.startExpanded = function( _isExpanded ){    if( !this.trackingVendor ) return;    this.trackingVendor.startExpanded( _isExpanded );};TrackingManager.exitClicked = function( _btn, e ){    if( !this.trackingVendor || !_btn ) return;    var btnId = _btn.id;    if( !this.btnList[btnId] ) return;    this.fireExit( this.btnList[btnId].id, this.btnList[btnId].close );};TrackingManager.fireExit = function( exit, _close ){    if( !this.trackingVendor || !exit ) return;    this.trackingVendor.fireExit( exit );    if( _close ) this.collapseUnit();    NotificationManager.sendNotification( Constants.TRACKING_EXIT_FIRED );};TrackingManager.dynamicExit = function( _exit, _values ){    if( !this.trackingVendor || !_exit || !_values ) return;    this.trackingVendor.dyanamicExit( _exit, _values );    NotificationManager.sendNotification( Constants.TRACKING_EXIT_FIRED );};TrackingManager.trackCounter = function( _id, _isCumulative ){    if( !this.trackingVendor || !_id ) return;    this.trackingVendor.trackCounter( _id, _isCumulative );};TrackingManager.timerStart = function( _id ){    //console.log( "TIMER START CALLED ON " + _id );    if( !this.trackingVendor || !_id ) return;    this.timerList.push( _id );    if( this.trackingVendor ) this.trackingVendor.timerStart( _id );};TrackingManager.timerStop = function( _id ){    //console.log( "TIMER STOP CALLED ON " + _id );    if( !this.trackingVendor || !_id ) return;    this.removeTimerFromList( _id );    this.trackingVendor.timerStop( _id );};TrackingManager.stopAllTimers = function(){    if( ! this.timerList || this.timerList.length == 0 ) return;    var id;    var length = this.timerList.length;    for( var i = 0; i < length; i++ )    {        id = this.timerList[i];        if( id ) this.timerStop( id );    }    this.timerList = [];}TrackingManager.removeTimerFromList = function( _id ){    if( !_id || !this.timerList || this.timerList.length == 0 ) return;    var length = this.timerList.length;    for( var i = 0; i < length; i++ )    {        if( _id == this.timerList[i] )        {            this.timerList.splice( i, 1 );            break;        }    }};//TODO: figure out if i need this.TrackingManager.addNotificationInterests = function(){    //var interests = [    //    Constants.TRACKING_EXIT_CLICKED,    //    Constants.TRACKING_FIRE_EXIT,    //    Constants.TRACKING_DYNAMIC_EXIT,    //    Constants.TRACKING_TRACK_COUNTER,    //    Constants.TRACKING_TIMER_START,    //    Constants.TRACKING_TIMER_STOP,    //    Constants.TRACKING_STOP_ALL_TIMERS,    //    Constants.TRACKING_COLLAPSE_UNIT,    //    Constants.TRACKING_EXPAND_UNIT,    //    Constants.TRACKING_START_EXPANDED    //];    //NotificationManager.regisiterNotificationInterests( interests, interestFired, "trackingmanager" );};TrackingManager.interestFired = function( note ){    switch( note.interest )    {        case Constants.TRACKING_EXIT_CLICKED:            if( !note.data ) return;            this.exitClicked( note.data );            break;        case Constants.TRACKING_FIRE_EXIT:            if( !note.data ) return;            this.fireExit( note.data );            break;        case Constants.TRACKING_DYNAMIC_EXIT:            if( !note.data || !note.data.tickets || note.data.location ) return;            this.dynamicExit( note.data.tickets, note.data.location );            break;        case Constants.TRACKING_TRACK_COUNTER:            if( !note.data ) return;            this.trackCounter( note.data );            break;        case Constants.TRACKING_TIMER_START:            if( !note.data ) return;            this.timerStart( note.data );            break;        case Constants.TRACKING_TIMER_STOP:            if( !note.data ) return;            this.timerStop( note.data );            break;        case Constants.TRACKING_STOP_ALL_TIMERS:            this.stopAllTimers();            break;        case Constants.TRACKING_COLLAPSE_UNIT:            if( !note.data ) return;            this.collapseUnit( note.data.btn, note.data.isUser );            break;        case Constants.TRACKING_EXPAND_UNIT:            if( !note.data ) return;            this.expandUnit( note.data.btn, note.data.ctr, note.data.tmr );            break;        case Constants.TRACKING_START_EXPANDED:            if( !note.data ) return;            this.startExpanded( note.data );            break;    }};